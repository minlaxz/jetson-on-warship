mqtt:
  enabled: True
  host: frigate-mqtt
  port: 1883
  topic_prefix: frigate
  client_id: frigate
  stats_interval: 30  # default -> 60

  #detectors:
    #tensorrt:
      #type: tensorrt
      #device: 0

detectors:
  deepstack:
    api_url: http://frigate-deepstack:5000/v1/vision/detection
    type: deepstack
    api_timeout: 10 # seconds

database:
  path: /config/frigate.db

  #model:
    #path: /config/model_cache/tensorrt/yolov7-320.trt
    #width: 320
    #height: 320
    #input_pixel_format: rgb
    #input_tensor: nchw # because it's yolo model

# audio:
#   enabled: False
#   max_not_heard: 30
#   min_volume: 500
#   listen:
#     - bark
#     - fire_alarm
#     - scream
#     - speech
#     - yell
#   filters:
#     speech:
#       threshold: 0.8

logger:
  default: info
  logs:
    frigate.event: debug

environment_vars:
  EXAMPLE_VAR: value

birdseye:
  enabled: True
  restream: False
  width: 1280
  height: 720
  quality: 15
  mode: objects
  inactivity_threshold: 30
  layout:
    scaling_factor: 2.0
    max_cameras: 1

# More information about presets at https://docs.frigate.video/configuration/ffmpeg_presets
ffmpeg:
  global_args: -hide_banner -loglevel warning -threads 2
  hwaccel_args: preset-jetson-h264
  input_args: preset-rtsp-generic
  output_args:
    detect: -threads 2 -f rawvideo -pix_fmt yuv420p
    record: preset-record-generic
    rtmp: preset-rtmp-generic
  retry_interval: 10

objects:
  track:
  - person
  - car
  filters:
    person:
      min_area: 250
      max_area: 100000
      threshold: 0.60
    car:
      min_area: 600
      max_area: 100000
      threshold: 0.58

record:
  enabled: True
  # Optional: Number of minutes to wait between cleanup runs (default: shown below)
  # This can be used to reduce the frequency of deleting recording segments from disk if you want to minimize i/o
  expire_interval: 60
  sync_recordings: False
  retain:
    days: 0
    mode: all
  export:
    timelapse_args: "-vf setpts=0.04*PTS -r 30"
  events:
    pre_capture: 5
    post_capture: 5
    objects:
      - person
      - car
    required_zones: []
    retain:
      default: 3
      mode: active_objects
      objects:
        car: 7

snapshots:
  enabled: True
  clean_copy: True
  timestamp: False
  bounding_box: False
  crop: True
  # height: 175 # uses original
  required_zones: []
  retain:
    default: 3
    objects:
      car: 7
  quality: 100

rtmp:
  enabled: False

# Uses https://github.com/AlexxIT/go2rtc (v1.8.3)
go2rtc:
  streams:
    outdoor_rtsp_cam:
      - rtsp://user:000111222.gG@192.168.1.108:554/cam/realmonitor?channel=1&subtype=0
    outdoor_rtsp_cam_sub:
      - rtsp://user:000111222.gG@192.168.1.108:554/cam/realmonitor?channel=1&subtype=1

cameras:
  outdoor_camera:
    enabled: True
    ffmpeg:
      inputs:
        - path: rtsp://127.0.0.1:8554/outdoor_rtsp_cam
          hwaccel_args: preset-jetson-h265
          roles:
            - audio
            - record
        - path: rtsp://127.0.0.1:8554/outdoor_rtsp_cam_sub
          hwaccel_args: preset-jetson-h264
          roles:
            - detect
    detect:
      width: 352
      height: 240
      fps: 5
    objects:
      track:
        - person
        - car
    # motion:
    #   mask:
    #   - 1280,164,1280,0,0,0,0,112
    #   - 310,378,328,535,496,565,728,584,826,720,0,720,0,326
    #   - 831,249,821,313,810,313,813,245
    live:
      stream_name: outdoor_rtsp_cam_sub
    best_image_timeout: 60
    webui_url: ""

    mqtt:
      enabled: True
      timestamp: False
      bounding_box: False
      crop: True
      # height: 270  # uses original
      quality: 100
      required_zones: []

    ui:
      order: 0
      dashboard: True

    birdseye:
      order: 0

ui:
  live_mode: mse
  use_experimental: False
  time_format: browser
  date_style: short
  time_style: medium
  strftime_fmt: "%Y/%m/%d %H:%M"

telemetry:
  network_interfaces:
    - eth
    - enp
    - eno
    - ens
    - wl
    - lo
  stats:
    amd_gpu_stats: True
    intel_gpu_stats: True
    network_bandwidth: True
  version_check: True
